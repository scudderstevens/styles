/*
 * Mixins
 * =================
 * abstracts/mixins
 */
 
/*
 * Define media breakpoints map
 * ==========
 * 'XS': Supports  2 column grid
 * 'SM': Supports  4 column grid
 * 'MD': Supports  8 column grid
 * 'LG': Supports 12 column grid
 * 'XL': Supports 12 column grid
 */

$sm-width: 376px;
$md-width: 576px;
$lg-width: 961px;
$extraLarge-width: 1181px;

@mixin xs {
	@media (max-width: #{$sm-width - 1px}) {
		@content;
	}
}
@mixin sm {
	@media (min-width: #{$sm-width}) and (max-width: #{$md-width - 1px}) {
		@content;
	}
}
@mixin md {
	@media (min-width: #{$md-width}) and (max-width: #{$lg-width - 1px}) {
		@content;
	}
}
@mixin lg {
	@media (min-width: #{$lg-width}) and (max-width: #{$extraLarge-width - 1px}) {
		@content;
	}

}
@mixin xl {
	@media (min-width: #{$extraLarge-width}) {
		@content;
	}
}

$breakpoints: (
	'XS': (max-width: 375px), 
	'SM': (min-width: 376px),
	'MD': (min-width: 576px),
	'LG': (min-width: 961px),
	'XL': (min-width: 1181px)
);

/* Responsive breakpoint manager
 * @access public
 * @param {String} $breakpoint - Breakpoint
 * @requires $breakpoints
 */
@mixin respond-to($breakpoint) {
	$raw-query: map-get($breakpoints, $breakpoint);
  
	@if $raw-query {
	  $query: if(
		type-of($raw-query) == 'string',
		unquote($raw-query),
		inspect($raw-query)
	  );
	  @media #{$query} {
		@content;
	}
	} @else {
	  @error 'No value found for `#{$breakpoint}`. '
		   + 'Please make sure it is defined in `$breakpoints` map.';
	}
  }

/*
 * Mixin for clearfix
 * @include clearfix;
*/
@mixin clearfix {
	&:before,
	&:after {
	    content: " "; /* 1 */
	    display: table; /* 2 */
	}

	&:after {
	    clear: both;
	}
}

/*
 * Mixin for Responsive Retina Image
 * @include image-2x;
*/ 
@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
			(-o-min-device-pixel-ratio: 2.6/2),
			(-webkit-min-device-pixel-ratio: 1.3),
			(min-device-pixel-ratio: 1.3),
			(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}

/*
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname');
 */

/* @mixin fontface($font-family, $font-url, $font-name) {
	@font-face {
		font: {
			family: $font-family;
			style: normal;
			weight: normal;
		}
		src: url($font-url + '/' + $font-name + '.eot');
		src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
			 url($font-url + '/' + $font-name + '.woff') format('woff'),
			 url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
			 url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
	}
} */